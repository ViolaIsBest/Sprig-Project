
/* 
@title: maze_game_starter
@author: Cheru Berhanu
@tags: []
@addedOn: 2023-08-08
*/

//sprites
const player = "p";
const wall = "w";
const goal = "g";
const enemy1 = "e";
const key = "k";
const push = "pu";
//variables
const totalNum = 20;
let noMove = false;

setLegend(
	[ player, bitmap`
..555555555555..
.72222222222227.
7222220222022227
.77222222222277.
..722220220227..
...7777200777...
.....3399933....
.33.33999993..33
..3339999993333.
...33999999333..
....39999993....
....33333333....
.....CCCCCC.....
.....CC..CC.....
.....CC..CC.....
.....CC..CC.....` ],
    [ wall, bitmap`
111CLLLLLLLLLLCC
111CL9999999LLC1
111CL9099999LC11
111CL9999999LC11
111CL9909909LC11
11CCL9999999LC11
11CLL990099LLC11
11CL9900999LCC11
11CL9909909LC111
11CL9999999LC111
11CL9999099LC111
11CL990999LLC111
1CCL999009LCC111
1CLL900999LC1111
CCL0009999LC1111
CLLLLLLLLLLC1111` ],
    [ goal, bitmap`
....DDDDDDDD....
...D55555555D...
..D5577777755D..
.D577666666775D.
D55769909996755D
D57690999090675D
D57699090999675D
D57690999009675D
D57609090099675D
D57600999909675D
D57690990990675D
D55769909996755D
.D577666666775D.
..D5577777755D..
...D55555555D...
....DDDDDDDD....`],
    [ enemy1, bitmap`
................
.....3..3..3....
...333333333....
..33666666633...
..3666666666333.
3336066660663.33
.366666666663...
.36666666666333.
3366666666663.33
.366000006663...
.36066666066333.
.366666666663.33
.336666666633...
..3333333333....
...3..3..3.33...
...3..3..3..3...`],
    [ key, bitmap`
...999999999....
..93333333339...
.9366666666399..
.93666666663999.
.9366666666399..
..93333333339...
...999999999....
......99........
......99........
......999999....
......999999....
......99........
......9999......
......9999......
......99........
................`]
)

setSolids([player, enemy1])

let level = 0
const levels = [
	map`
wwwg...
e...w..
.wwww.w
...p..w
.wwww.w
.w..w.w
.....ew`,
    map`
p.w`,
]

setMap(levels[level])

setPushables({
	[ player ]: [push]
})

onInput("s", () => {
  getFirst(player).y += 1;
  if(checkMovement() === true){
    getFirst(player).y -= 1;
    noMove = true;
  }
})

onInput("a", () => {
  getFirst(player).x -= 1;
  if(checkMovement() === true){
    getFirst(player).x += 1;
    noMove = true;
  }
})

onInput("d", () => {
  getFirst(player).x += 1;
  if(checkMovement() === true){
    getFirst(player).x -= 1;
    noMove = true;
  }
})

onInput("w", () => {
  getFirst(player).y -= 1;
  if(checkMovement() === true){
    getFirst(player).y += 1;
    noMove = true;
  }
})  
  
afterInput(() => {
  if(noMove === false){
    let goalsCovered = tilesWith(goal, player).length;
    
    const allEnemies = getAll(enemy1);
    allEnemies.forEach((enemy1) => moveEnemy(enemy1));
    
    moveEnemy();
    
    if(goalsCovered > 0){
      level += 1;
      if (level > totalNum){
        //finish "world"
      } else {
        setMap(levels[level]);
      }
    }
  } else {
    noMove = true;
  }
})

function moveEnemy(enemy){
  let rand = Math.floor(Math.random() * 4);
  if(rand === 1){
    enemy.x += 1;
  } else if (rand === 2){
    enemy.x -= 1;
  } else if (rand === 3){
    enemy.y += 1;
  } else if (rand === 4){
    enemy.y -= 1;
  }
}

function checkMovement(){
  let wallsCovered = tilesWith(player, wall).length;
  if(wallsCovered > 0){
    return true;
  } else {
    return false;
  }
}

function checkEnemyMovement(){
  let wallsCovered = tilesWith(enemy, wall).length;
  if(wallsCovered > 0){
    return true;
  } else {
    return false;
  }
}

//Debugger line: addText("test", {x:1,y:1});
